//Name: Map.cpp
//Author: Cason White

//Map.cpp contains the member functions for the game map.  It contains the following:

//Map::Map(int x, int y) - constructor containing the x,y size of the map, creates a two dimensional
//array floor of Tile objects with x length and y height, as well as storing x and y ints .

//Tile* Map::getTileat(int x, int y) - returns a pointer to a Tile object within the two dimensional
// array floor

//void Map::createArena() - creates a test arena for the user to play around in

//cRow(row, r1, r2, value) - changes a row in the map from r1 to row size - r2 to value
//same for cColumn, only it changes columns.

#include "Map.h"

//the constructor creates a two dimensional vector of Tile pointers to act as the map.
//each tile by default is a floor.
Map::Map(int x, int y) {
    
    this->floor.resize(x);
    
    for(int i =0; i < this->x; i++) {
	
	this->floor[i].resize(y);
	this->VTalloc(this->floor[i]);
	
    }
}

//allocates a column of Tile objects into memory
void Map::VTalloc(vector<Tile*> t) {
    for(int i = 0; i < this->y; i++) {
	t[i] = new Tile(*this);
    }
}

tuple <int, int> Map::getSize(){
    return make_tuple(this->x, this->y);
}

Tile* Map::getTileAt(int x, int y) {
    return this->floor[x][y];
}


void Map::cRow(int row, int r1, int r2, bool value) {
    
    for(int i = r1; i < this->y - r2; i++) {
	this->floor[row][i]->setTileType(value);
    }
}

void Map::cColumn(int col, int r1, int r2, bool value) {
    for(int i = r1; i < this->x - r2; i++) {
	this->floor[i][col]->setTileType(value);
    }
}

void Map::createArena() {
    int x = this->x;
    int y = this->y;

    this->cRow(0, 1, 1, false);
    this->cRow(y-1, 1, 1, false);
    this->cColumn(0, 0, 0, false);
    this->cColumn(x-1, 0, 0, false);
    
    
}
